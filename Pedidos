typedef struct {
    int codigo;
    int quantidade;
    char produto[50];
    float valor;
    int id;
} Pedido;

void consultarPedidos() {
    FILE* arquivo = fopen("pedidos.txt", "r");

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    printf("Aqui está a lista de pedidos feitos:\n\n");
    char linha[200];
    while (fgets(linha, sizeof(linha), arquivo) != NULL) {
        printf("%s", linha); 
    }
    printf("\n");

    fclose(arquivo);
}

int contarPedidos(Pedido pedidos[], FILE *arquivo){
    int i = 0;
    char linha[100];

    rewind(arquivo);

    while (fgets(linha, sizeof(linha), arquivo) != NULL) {

        if (strncmp(linha, "Código Comanda:", 15) == 0) { //verifica se os 15 primeiros caracteres da linha são "Código Comanda:". 
            i++;
        }
    }
    return i;
}

float buscarPreco(char *nomeProduto) {
    FILE *arqProdutos = fopen("produtos.txt", "r");
    if (arqProdutos == NULL) {
        printf("Erro ao abrir o arquivo de produtos.\n");
        return -1;
    }

    Produto produtos[50];
    int totalProdutos = loadprodutos(produtos, arqProdutos);
    fclose(arqProdutos);

    for (int i = 0; i < totalProdutos; i++) {
        if (strcmp(produtos[i].nome, nomeProduto) == 0) {
            return produtos[i].valor;
        }
    }
    printf("Produto não encontrado.\n");
    return -1; 
}

int buscarId(char *nomeProduto) {
    FILE *arqProdutos = fopen("produtos.txt", "r");
    if (arqProdutos == NULL) {
        printf("Erro ao abrir o arquivo de produtos.\n");
        return -1;
    }

    Produto produtos[50];
    int totalProdutos = loadprodutos(produtos, arqProdutos);
    fclose(arqProdutos);

    for (int i = 0; i < totalProdutos; i++) {
        if (strcmp(produtos[i].nome, nomeProduto) == 0) {
            return produtos[i].id;
        }
    }
    printf("Produto não encontrado.\n");
    return -1; 
}

void deletarTudo() {
    FILE* arquivo = fopen("pedidos.txt", "w"); // Abre com o w pra resetar o arquivo
    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }
    fclose(arquivo);
    printf("Todos os pedidos foram deletados.\n");
}

void cadastrarPedido(){

    FILE *arqProdutos = fopen("produtos.txt", "r");
    if (arqProdutos == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    Produto produtos[50];
    int totalProdutos = loadprodutos(produtos, arqProdutos);
    fclose(arqProdutos);

    printf("\n");
    printf("Os produtos disponiveis são:\n");
    for (int i = 0; i < totalProdutos; i++) {
        printf("%d - %s - %.2f\n", i, produtos[i].nome, produtos[i].valor);
    }

    FILE* arquivo = fopen("pedidos.txt", "a+");
    Pedido novoPedido;
    int quantItems, totalPedidos=0;
    Pedido pedidos[100];
    float totalComanda = 0.0;

    if (arquivo == NULL) {
        printf("Erro ao abrir o arquivo.\n");
        return;
    }

    totalPedidos = contarPedidos(pedidos, arquivo);
    int codigoComanda = totalPedidos + 1; 

    printf("\n");
    printf("Quantos produtos diferentes deseja adicionar à comanda?\n");
    scanf("%d", &quantItems);

    fprintf(arquivo, "Código Comanda: %d\n", codigoComanda);

    for (int i = 0; i < quantItems; i++){
        Pedido novoPedido;
        int escolhaProduto;

        printf("Produto %d:\n", i + 1);
        printf("Indice do produto: ");
        scanf("%d", &escolhaProduto);

        strcpy(novoPedido.produto, produtos[escolhaProduto].nome);

        novoPedido.valor = buscarPreco(novoPedido.produto);
        if (novoPedido.valor == -1) {
            printf("Erro. Produto não encontrado.\n");
            continue;
        }

        novoPedido.id = buscarId(novoPedido.produto);
        if (novoPedido.id == -1) {
            printf("Erro. Produto não encontrado.\n");
            continue;
        }

        printf("Quantidade: ");
        scanf("%d", &novoPedido.quantidade);

        float totalProduto = novoPedido.valor * novoPedido.quantidade;
        totalComanda += totalProduto;

        fprintf(arquivo, "Produto: %s\nID: %d\nQuantidade: %d\nValor Unitário: %.2f\nTotal: %.2f\n", 
                novoPedido.produto, novoPedido.id, novoPedido.quantidade, novoPedido.valor, totalProduto);
        printf("Produto %d cadastrado na comanda com sucesso!\n", i + 1);
    }

    fprintf(arquivo, "\nValor Total da Comanda: %.2f\n\n", totalComanda);
    fclose(arquivo);
    printf("Todos os produtos foram cadastrados na comanda com sucesso!\n");
}

void pedido(){
    int escolha = 0;

    while(escolha != 4){
        printf("\n");
        printf("O que você deseja fazer?\n1. Adicionar novo pedido;\n2. Visualizar pedidos cadastrados;\n3. Excluir todos os pedidos;\n4. Sair.\n");
        scanf("%d", &escolha);

        switch (escolha) {
            case 1:
                cadastrarPedido();
                break;
            case 2:
                consultarPedidos();
                break;
            case 3:
                deletarTudo();
                break;
            case 4:
                break;
            default:
                printf("Escolha inválida.\n");    
            
        }    
    }    
}

int main () {
    cadastro();
    pedido();

    return 0;
}
